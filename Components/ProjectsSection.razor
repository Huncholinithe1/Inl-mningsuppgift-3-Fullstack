@using CVProfile.Models
@using CVProfile.Data
@inject ApplicationDbContext Context

<div class="projects-section">
    <h2>Projects</h2>
    
    <div class="projects-grid">
        @if (Projects != null)
        {
            @foreach (var project in Projects)
            {
                <div class="project-card">
                    @if (!string.IsNullOrEmpty(project.ImageUrl))
                    {
                        <img src="@project.ImageUrl" alt="Screenshot or preview of @project.Name project" class="project-image" />
                    }
                    <div class="project-content">
                        <h3>@project.Name</h3>
                        <p class="project-date">Completed: @project.CompletionDate.ToString("MMMM yyyy")</p>
                        <p class="project-description">@project.Description</p>
                        @if (!string.IsNullOrEmpty(project.Technologies))
                        {
                            <div class="project-technologies">
                                @foreach (var tech in project.Technologies.Split(','))
                                {
                                    <span class="tech-tag">@tech.Trim()</span>
                                }
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(project.GitHubUrl))
                        {
                            <a href="@project.GitHubUrl" target="_blank" rel="noopener noreferrer" class="github-link">
                                <i class="bi bi-github"></i> View on GitHub
                            </a>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
    .projects-section {
        padding: 2rem 1rem;
    }

    .projects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    .project-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }

    .project-card:hover {
        transform: translateY(-4px);
    }

    .project-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .project-content {
        padding: 1.5rem;
    }

    .project-content h3 {
        margin: 0 0 0.5rem 0;
        color: #333;
    }

    .project-date {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .project-description {
        color: #444;
        margin-bottom: 1rem;
        line-height: 1.6;
    }

    .project-technologies {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .tech-tag {
        background-color: #f0f0f0;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.85rem;
        color: #666;
    }

    .github-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: #333;
        text-decoration: none;
        padding: 0.5rem 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .github-link:hover {
        background-color: #f5f5f5;
        color: #0066cc;
    }

    @media (max-width: 640px) {
        .projects-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<Project>? Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Projects = await Context.Projects.ToListAsync();
    }
} 